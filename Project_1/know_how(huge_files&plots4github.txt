А если эти задачи решены иным способом, то я не виноват. )
---
I. Как закачивать большие датафреймы на Github.
Хочется иметь возможность данные большого csv-файла (от HeadHunter и т.п.) хранить на Github.
Допустим, файл округленно весит 500 Мб. В нем почти 50000 строк. Но Github принимает по 25 Мб, т.е. в 20 раз меньше. Закачать не получится. Читать из архива его тоже не получится, так как архивируется он до 35-40 Мб, и это больше, чем 25. Даже архив не загрузить.
Надо сделать так:
Поделить файл на части, которые бы лопал Github.
Затем научить проект читать эти части и объединять.
1. Деление.
Файл объемом 500 Мб с 50000 строками делим по вертикали, например, на 25 частей, каждая часть максимум по 20 Мб и по 2000 строк. Не на 20, а на 21-25 - это чтобы получилось с запасом по лимиту объема, пусть и с небольшим уменьшением количества строк в каждой. Деление выполняем, выделяя очередной блок строк и превращая его в отдельный датафрейм, который записываем в отдельную файл-часть. И записываем все файлы-части в одну папочку.
Этот процесс можно организовать при помощи цикла, проходя по строкам сверху вниз. Выделили блок в датафрейм, сохранили в новый файл с маленьким объемом и индексированным именем типа hh_data_1, hh_data_2 и т.д. в папку на ПК. Теперь каждую часть можно будет легко закачать на Github.
2. Чтение.
В коде проекта чтение полной базы в общий датафрейм должно выглядеть как поочередное чтение всех файлов-частей с конкатенацией по вертикали.
Цикл:
Прочли 1, прочли 2, сконкатенировали 1 и 2 в большой 1.
Прочли 3 под именем 2 (чтобы убить старый 2 и не тратить память), сконкатенировали 1 и 3(2) в большой 1.
Прочли 4 под именем 2, сконкатенировали 1 и 4(2).
Прочли 5 под именем 2, сконкатенировали 1 и 5(2).
И так далее.
В итоге в памяти большой 1 и последний 20.
Полезным кажется применение параметра header (урок 2 модуля 16), который при записи позволил бы сохранить в первой части заголовок всей таблицы.
----
II. Как вставлять фото картинок plotly.express, чтобы их было видно на Github.
Научился, подсмотрев в коде самого проекта. Там есть пара зеленоватых подсасываемых картинок.
Когда ваш проект уже работает на ПК, для каждой картинки plotly.express делаете ее фото, нажимая на значок фотоаппарата справа вверху (левый значок, вроде бы).  Все картинки сохраняете в одну папку. Накопится куча картинок формата png или jpg. Потом все картинки закачиваете на Github в отдельную подпапку в папке проекта, просто для удобства.
Чтобы вставить подсасываемую картинку в файл проекта:
Идете в свою папку Github, где хранятся картинки.
Тыкаете по названию нужной картинки, чтобы ее просмотреть.
Она открывается в интерфейсе Github. В адресной строке есть ссылка с github, но она для нашей цели не сработает.
Тыкаете теперь на картинке правой кнопкой мышки. В открывшемся контекстном меню жмете "Открыть картинку в новой вкладке" браузера.
В новой открывшейся вкладке с картинкой из адресной строки копируете адрес картинки вот такого вида: https://raw.githubusercontent.com/name/repository/main/project_1/pictures/pic_1.png - Прямой адрес картинки содержит не github, а githubusercontent.
Идете в свой файл проекта в VSCode или Jupiter notebook.
В поле Markdows, в том месте, куда хотите вставить картинку, пишете: <img src= > (в переводе: <изображение image источник source= >, то есть <картинку взять из источника= >).
И после знака = перед знаком > вставляете адрес картинки. Получается так: <img src=https://raw.githubusercontent.com/name/repository/main/project_1/pictures/pic_1.png>
Теперь перезапускаете код проекта. Картинки подсасываются. И если сделать так со всеми картинками plotly.express, то файл проекта из 28 Мб станет 2-4 Мб, если в проекте есть еще картинки, созданные при помощи других библиотек.
Но у вас еще в проекте отражаются "родные" картинки plotly.express. Если вам нужно, чтобы они не отображались параллельно с подсасываемыми картинками, можно закомментировать знаком # команду вывода их на экран fig.show().
А когда захотите все вернуть наоборот, снимаете знак # перед fig.show() и ставите перед <img src= >.
Конечно, таким же способом можно вставлять в проекты и любые другие фото. Только отображение картинок matplotlib, насколько я пока понимаю, отключить невозможно. А значит, и подсасывать их дубли смысла нет. (edited) 